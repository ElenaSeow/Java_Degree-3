/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package assignment_oopj;

import Building_Executive.Building_Executive_MainPage;
import Vendor.Vendor_Page;
import Security.Security_Page;
import Resident.Resident_Main_Page;
import Account_Executive.Account_Executive_Mainpg;
import Admin.Admin_Executive_MainPage;
import java.io.BufferedReader;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;

/**
 *
 * @author Ryan
 */

public class LoginPage extends javax.swing.JFrame {

    /**
     * Creates new form LoginPage
     */
    public LoginPage() {
        initComponents();
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        selectionbox = new javax.swing.JComboBox<>();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        EmailTF = new javax.swing.JTextField();
        PasswordTF = new javax.swing.JPasswordField();
        jSeparator1 = new javax.swing.JSeparator();
        jSeparator2 = new javax.swing.JSeparator();
        Back = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        LoginBtn = new javax.swing.JLabel();
        selection = new javax.swing.JComboBox<>();

        selectionbox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(67, 63, 113));

        jLabel1.setFont(new java.awt.Font("Baskerville Old Face", 0, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Parkhill Residence");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(105, 105, 105)
                .addComponent(jLabel1)
                .addContainerGap(105, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(101, 101, 101)
                .addComponent(jLabel1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel2.setBackground(new java.awt.Color(114, 126, 224));

        jLabel2.setFont(new java.awt.Font("Baskerville Old Face", 0, 24)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("Login");

        EmailTF.setBackground(new java.awt.Color(114, 126, 224));
        EmailTF.setFont(new java.awt.Font("Baskerville Old Face", 0, 14)); // NOI18N
        EmailTF.setForeground(new java.awt.Color(255, 255, 255));
        EmailTF.setText("User ID");
        EmailTF.setBorder(null);
        EmailTF.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                EmailTFFocusGained(evt);
            }
        });

        PasswordTF.setBackground(new java.awt.Color(114, 126, 224));
        PasswordTF.setFont(new java.awt.Font("Baskerville Old Face", 0, 14)); // NOI18N
        PasswordTF.setForeground(new java.awt.Color(255, 255, 255));
        PasswordTF.setText("password");
        PasswordTF.setBorder(null);
        PasswordTF.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                PasswordTFFocusGained(evt);
            }
        });

        jSeparator1.setForeground(new java.awt.Color(255, 255, 255));

        jSeparator2.setForeground(new java.awt.Color(255, 255, 255));

        Back.setFont(new java.awt.Font("Baskerville Old Face", 0, 14)); // NOI18N
        Back.setForeground(new java.awt.Color(255, 255, 255));
        Back.setText("Back");
        Back.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                BackMouseClicked(evt);
            }
        });

        jPanel3.setBackground(new java.awt.Color(114, 126, 224));
        jPanel3.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255)));

        LoginBtn.setFont(new java.awt.Font("Baskerville Old Face", 0, 18)); // NOI18N
        LoginBtn.setForeground(new java.awt.Color(255, 255, 255));
        LoginBtn.setText("Login");
        LoginBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                LoginBtnMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap(33, Short.MAX_VALUE)
                .addComponent(LoginBtn)
                .addGap(30, 30, 30))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(LoginBtn, javax.swing.GroupLayout.DEFAULT_SIZE, 28, Short.MAX_VALUE)
                .addContainerGap())
        );

        selection.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Admin Executive", "Building Executive", "Building Manager", "Account Executive", "Resident", "Vendor", "Security Guard" }));

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(0, 90, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addGap(167, 167, 167))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(PasswordTF, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(EmailTF, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(selection, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(82, 82, 82))))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addComponent(Back)
                        .addGap(15, 15, 15))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(135, 135, 135))))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addComponent(Back)
                .addGap(60, 60, 60)
                .addComponent(jLabel2)
                .addGap(18, 18, 18)
                .addComponent(EmailTF, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(PasswordTF, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(26, 26, 26)
                .addComponent(selection, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 36, Short.MAX_VALUE)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(38, 38, 38))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void EmailTFFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_EmailTFFocusGained
        EmailTF.setText("");
    }//GEN-LAST:event_EmailTFFocusGained

    private void PasswordTFFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_PasswordTFFocusGained
        PasswordTF.setText("");
    }//GEN-LAST:event_PasswordTFFocusGained

    private void BackMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_BackMouseClicked
        MainPage MP = new MainPage();
        MP.show(); //display Main Page

        dispose(); //close current frame after open new frame
    }//GEN-LAST:event_BackMouseClicked

    private void LoginBtnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_LoginBtnMouseClicked
        // Request email and password from user
        String id = EmailTF.getText();
        String email = EmailTF.getText();
        String password = PasswordTF.getText();
        String ae = selection.getSelectedItem().toString();
        ///////////////////////// ADMIN EXECUTIVE /////////////////////////
        if (ae.equals("Admin Executive")){
           
            try (BufferedReader brr = new BufferedReader(new FileReader("AdminExecutive.txt"))) {
                String line;
                while ((line = brr.readLine()) != null) {
                String[] list = line.split(":");
                String ID = list[0];
                String name = list [1];
                String eml = list[2];
                String pwd = list[3];
                String roles = list[4];
                String number = list [5];
                
                    if (id.equals(ID) && password.equals(pwd) && roles.equals("AdminExecutive")) {
                        JOptionPane.showMessageDialog(null,"Login Successful!");  
                        JOptionPane.showMessageDialog(null,"You are entering Admin Executive Page....");
                        
                        LoginDetails logindetails = new LoginDetails(id);
                        Admin_Executive_MainPage AEMP = new Admin_Executive_MainPage(logindetails);
                        AEMP.setVisible(true);
                        break;
                    } 
                } 
                      
                if (line == null) {
                    JOptionPane.showMessageDialog(null, "Invalid Credentials or Role, Try Again!");
                }
            
            } catch (FileNotFoundException ex) {
                Logger.getLogger(LoginPage.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(LoginPage.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        ///////////////////////// ACCOUNT EXECUTIVE /////////////////////////
        else if (ae.equals("Account Executive")) {
            
            try (BufferedReader brr = new BufferedReader(new FileReader("AccountExecutive.txt"))) {
                String line;
                while ((line = brr.readLine()) != null) {
                String[] list = line.split(":");
                String ID = list[0];
                String name = list [1];
                String eml = list[2];
                String pwd = list[3];
                String roles = list[4];
                String number = list [5];
                
                    if (id.equals(ID) && password.equals(pwd) && roles.equals("AccountExecutive")) {
                        JOptionPane.showMessageDialog(null, "Login Successful!");
                        JOptionPane.showMessageDialog(null, "You are entering Account Executive Page....");
                        
                        LoginDetails logindetails = new LoginDetails (id);
                        Account_Executive_Mainpg accmp = new Account_Executive_Mainpg(logindetails);
                        accmp.setVisible(true);
                        break; 
                    }
                }
                
                if (line == null) {
                    JOptionPane.showMessageDialog(null, "Invalid Credentials or Role, Try Again!");
                }   
                
            } catch (FileNotFoundException ex) {
                Logger.getLogger(LoginPage.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(LoginPage.class.getName()).log(Level.SEVERE, null, ex);
            }           
        }
        ///////////////////////// BUILDING EXECUTIVE /////////////////////////
        else if (ae.equals("Building Executive")) {
            
            try (BufferedReader brr = new BufferedReader(new FileReader("BuildingExecutive.txt"))) {
                String line;
                while ((line = brr.readLine()) != null) {
                String[] list = line.split(":");
                String ID = list[0];
                String name = list [1];
                String eml = list[2];
                String pwd = list[3];
                String roles = list[4];
                String number = list [5];
                
                    if (id.equals(ID) && password.equals(pwd) && roles.equals("BuildingExecutive")) {
                        JOptionPane.showMessageDialog(null, "Login Successfull!");
                        JOptionPane.showMessageDialog(null, "You are entering Building Executive Page....");
                        
                        LoginDetails logindetails = new LoginDetails(id);
                        Building_Executive_MainPage BEMP = new Building_Executive_MainPage(logindetails);
                        BEMP.setVisible(true);
                        break;
                    }
                }
                
                if (line == null) {
                    JOptionPane.showMessageDialog(null, "Invalid Credentials or Role, Try Again!");
                } 
                
            } catch (FileNotFoundException ex) {
                Logger.getLogger(LoginPage.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(LoginPage.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        ///////////////////////// BUILDING MANAGER /////////////////////////
        else if (ae.equals("Building Manager")) {
        
            try (BufferedReader brr = new BufferedReader(new FileReader("BuildingManager.txt"))) {
                String line;
                while ((line = brr.readLine()) != null) { 
                String[] list = line.split(":");
                String ID = list[0];
                String name = list [1];
                String eml = list[2];
                String pwd = list[3];
                String roles = list[4];
                String number = list [5];
                
                    if (id.equals(ID) && password.equals(pwd) && roles.equals("BuildingManager")) {
                        JOptionPane.showMessageDialog(null, "Login Successfull!");
                        JOptionPane.showMessageDialog(null, "You are entering Building Manager Page....");
                        
                        LoginDetails logindetails = new LoginDetails(id);
                        Building_Manager_Sample BMS = new Building_Manager_Sample(logindetails);
                        BMS.setVisible(true);
                        break;
                    }
                }
                
                if (line == null) {
                    JOptionPane.showMessageDialog(null, "Invalid Credentials or Role, Try Again!");
                } 
                
            } catch (FileNotFoundException ex) {
                Logger.getLogger(LoginPage.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(LoginPage.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        ///////////////////////// RESIDENT /////////////////////////
        else if (ae.equals("Resident")) {
        
            try (BufferedReader brr = new BufferedReader(new FileReader("BackupResident.txt"))) {
                String line;
                while ((line = brr.readLine()) != null) { 
                String[] list = line.split(":");
                String ID = list[0];
                String name = list [1];
                String eml = list[2];
                String pwd = list[3];
                String roles = list[4];
                String number = list [5];
                
                    if (id.equals(ID) && password.equals(pwd) && roles.equals("Resident")) {
                        JOptionPane.showMessageDialog(null, "Login Successfull!");
                        JOptionPane.showMessageDialog(null, "You are entering Resident Page....");
                        
                        LoginDetails logindetails = new LoginDetails (id);
                        Resident_Main_Page rmp = new Resident_Main_Page(logindetails);
                        rmp.setVisible(true);
                        dispose();
                        break; 
                    }
                }
                
                if (line == null) {
                    JOptionPane.showMessageDialog(null, "Invalid Credentials or Role, Try Again!");
                } 
                
            } catch (FileNotFoundException ex) {
                Logger.getLogger(LoginPage.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(LoginPage.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        
        ///////////////////////// SECURITY /////////////////////////
        else if (ae.equals("Security Guard")) {
        
            try (BufferedReader brr = new BufferedReader(new FileReader("Security.txt"))) {
                String line;
                while ((line = brr.readLine()) != null) { 
                String[] list = line.split(":");
                String ID = list[0];
                String name = list [1];
                String eml = list[2];
                String pwd = list[3];
                String roles = list[4];
                String number = list [5];
                
                    if (id.equals(ID) && password.equals(pwd) && roles.equals("Security")) {
                        JOptionPane.showMessageDialog(null, "Login Successfull!");
                        JOptionPane.showMessageDialog(null, "You are entering Security Page....");
                        
                        LoginDetails logindetails = new LoginDetails(id);
                        Security_Page SP = new Security_Page(logindetails);
                        SP.setVisible(true);
                        break;
                    }
                }
                
                if (line == null) {
                    JOptionPane.showMessageDialog(null, "Invalid Credentials or Role, Try Again!");
                } 
                
            } catch (FileNotFoundException ex) {
                Logger.getLogger(LoginPage.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(LoginPage.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        ///////////////////////// VENDOR /////////////////////////
        else if (ae.equals("Vendor")) {
        
            try (BufferedReader brr = new BufferedReader(new FileReader("Vendor.txt"))) {
                String line;
                while ((line = brr.readLine()) != null) { 
                String[] list = line.split(":");
                String ID = list[0];
                String name = list [1];
                String eml = list[2];
                String pwd = list[3];
                String roles = list[4];
                String number = list [5];
                
                    if (id.equals(ID) && password.equals(pwd) && roles.equals("Vendor")) {
                        JOptionPane.showMessageDialog(null, "Login Successfull!");
                        JOptionPane.showMessageDialog(null, "You are entering Vendor Page....");
                        
                        LoginDetails logindetails = new LoginDetails(id);
                        Vendor_Page VP = new Vendor_Page(logindetails);
                        VP.setVisible(true);
                        break;
                    }
                }
                
                if (line == null) {
                    JOptionPane.showMessageDialog(null, "Invalid Credentials or Role, Try Again!");
                } 
                
            } catch (FileNotFoundException ex) {
                Logger.getLogger(LoginPage.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(LoginPage.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_LoginBtnMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(LoginPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(LoginPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(LoginPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(LoginPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new LoginPage().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel Back;
    public javax.swing.JTextField EmailTF;
    private javax.swing.JLabel LoginBtn;
    public javax.swing.JPasswordField PasswordTF;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    public javax.swing.JComboBox<String> selection;
    private javax.swing.JComboBox<String> selectionbox;
    // End of variables declaration//GEN-END:variables
}
